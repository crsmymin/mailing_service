<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mail">
	<select id="getSendList" parameterType="String" resultType="SendListVO">
               
		SELECT send_list_id,
			send_subject,
			contents_id,
			send_datetime,
			send_status,
			send_memo,
			send_mail_list,
			(select count(*) from mail_send_result As r where r.send_list_id=l.send_list_id and delete_date is null) as send_cnt,
			(select count(*) from mail_send_result As r where r.send_list_id=l.send_list_id and send_result_yn is null and delete_date is null) as send_w_cnt,
			(select count(*) from mail_send_result As r where r.send_list_id=l.send_list_id and send_result_yn='y'and delete_date is null) as send_succ_cnt,
			(select count(*) from mail_send_result As r where r.send_list_id=l.send_list_id and (send_result_yn='r' ||send_result_yn='n')  and delete_date is null) as send_fail_cnt,
			(select count(*) from mail_send_result As r where r.send_list_id=l.send_list_id and send_mail_check_yn='y' and delete_date is null) as mail_check,
			IFNULL ((select count(*) from mail_rejection r  WHERE  r.send_list_id=l.send_list_id GROUP BY r.rejection_mail),0) as mail_reject
		FROM reverse_mail.mail_send_list l
		WHERE delete_date IS NULL
        <if test='value != null'>
			AND send_list_id = #{0}
		</if> 
		ORDER BY send_list_id desc       
     </select>
     
     <insert id="insertSendMail" useGeneratedKeys="true" keyProperty="send_list_id" parameterType="SendListVO">
     
     			INSERT INTO reverse_mail.mail_send_list
						(contents_id,
						send_subject,
						send_mail_list,
						send_memo
						<if test='send_datetime != null and send_datetime != ""'>
						,send_datetime
						</if>
						)
						VALUES	
              			(#{contents_id}, #{send_subject}, #{send_mail_list}, #{send_memo}
              			<if test='send_datetime != null and send_datetime != ""'>
						,#{send_datetime}
						</if>)
     </insert>
     
	<update id="deleteSendMail" parameterType="String" >
	  update reverse_mail.mail_send_list set
	    delete_date = now()
	  where send_list_id in (${value})
	</update>
	
	<update id="updateSendingMail" parameterType="String" >
	  update reverse_mail.mail_send_list set
	    send_status = '전송중'
	  where send_list_id in (${value})
	</update>
	
	<update id="updateSendingEndMail" parameterType="String" >
	  update reverse_mail.mail_send_list set
	    send_status = '전송완료'
	  where send_list_id in (${value})
	</update>
	

     <select id="getSendResultList" parameterType="String" resultType="SendResultVO" >
            
		SELECT send_result_id,
			r.send_list_id,
			send_mail,
			send_date,
			send_result_yn,
			send_mail_check_yn,
			send_mail_check_date,
			j.req_date as reject_date,
            (select member_name from mail_member m where r.send_mail=m.member_mail LIMIT 1) as member_name
		FROM reverse_mail.mail_send_result r
		LEFT OUTER JOIN mail_rejection j ON j.rejection_mail=r.send_mail AND r.send_list_id=j.send_list_id
		WHERE delete_date is null
		<if test='value != null and value != ""'>
			AND r.send_list_id = ${value}
		</if>
		GROUP BY send_mail
		ORDER BY send_list_id desc
     </select>
     
      <insert id="insertSendResult" parameterType="java.util.List">
     
     			INSERT INTO reverse_mail.mail_send_result
						(send_list_id,
						send_mail
						)
						VALUES	
				<foreach collection="list" item="item" separator=" , " >
			        (#{item.send_list_id},#{item.send_mail})
			    </foreach>
     </insert>
     
     <select id="sendMail" parameterType="String" resultType="SendResultVO" >
        
		SELECT send_result_id,
			r.send_list_id,
			send_mail,
			send_date,
			send_result_yn,
			send_mail_check_yn,
			send_mail_check_date,
            send_subject,
            send_datetime,
            contents_html,
            send_status,
            send_memo,
               j.req_date as reject_date
		FROM reverse_mail.mail_send_result r
        JOIN mail_send_list l ON r.send_list_id = l.send_list_id
        JOIN mail_contents c ON c.contents_id = l.contents_id
        LEFT OUTER JOIN mail_member m ON m.member_mail = r.send_mail
		LEFT OUTER JOIN mail_rejection j ON j.rejection_mail=r.send_mail 
		WHERE l.delete_date is null
        and send_status ='대기중'
	    <choose>
	    <when test='value != null and value != ""'>
			and r.send_list_id = ${value}
		</when>
		<otherwise>
        	 <![CDATA[ and send_datetime <= now()]]>
        </otherwise>
        </choose>
        group by send_mail
				ORDER BY send_list_id desc
     </select>
     
     <update id="updateSuccMail" parameterType="String" >
	  update reverse_mail.mail_send_result set
	    send_result_yn = 'y',
	    send_date=now()
	  where send_result_id in (${value})
	</update>
	
	<update id="updateFailMail" parameterType="String" >
	  update reverse_mail.mail_send_result set
	    send_result_yn = 'n',
	    send_date=now()
	  where send_result_id in (${value})
	</update>
	
	<update id="updateFailMail2" parameterType="String" >
	  update reverse_mail.mail_send_result set
	    send_result_yn = 'r',
	    send_date=now()
	  where send_result_id in (${value})
	</update>
	
	 <update id="updateCheckedMail" parameterType="SendResultVO" >
	  update reverse_mail.mail_send_result set
	    send_mail_check_yn='y',
	    send_mail_check_date=now()
	  where send_mail =#{send_mail}
	  and send_list_id =#{send_list_id}
	</update>
	
	<insert id="updateRejectMail" parameterType="SendResultVO">
   		INSERT INTO reverse_mail.mail_rejection
			(rejection_mail,
			send_list_id)
			VALUES	
		(#{send_mail},${send_list_id})
     </insert>
</mapper>